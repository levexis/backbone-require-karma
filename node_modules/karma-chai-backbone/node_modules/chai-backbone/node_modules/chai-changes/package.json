{
  "author": {
    "name": "Matthijs Groen",
    "email": "matthijs.groen@gmail.com"
  },
  "name": "chai-changes",
  "description": "Change assertions for the Chai assertion library",
  "keywords": [
    "test",
    "assertion",
    "assert",
    "testing",
    "changes",
    "promises"
  ],
  "version": "1.3.4",
  "repository": {
    "type": "git",
    "url": "https://github.com/matthijsgroen/chai-changes"
  },
  "bugs": {
    "url": "https://github.com/matthijsgroen/chai-changes/issues"
  },
  "main": "./chai-changes",
  "devDependencies": {
    "chai-as-promised": ">= 3.2.3",
    "coffee-script": ">= 1.4.0",
    "chai": ">= 1.0.0",
    "when": "*",
    "mocha": ">= 1.0.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/matthijsgroen/chai-changes/blob/master/LICENSE"
    }
  ],
  "readme": "chai-changes\n============\n\n[![Build Status](https://travis-ci.org/matthijsgroen/chai-changes.png?branch=master)](https://travis-ci.org/matthijsgroen/chai-changes)\n[![NPM Version](https://fury-badge.herokuapp.com/js/chai-changes.png)](http://badge.fury.io/js/chai-changes)\n\nchai-changes is an extension to the [chai](http://chaijs.com/) assertion library that\nprovides a set of change-specific assertions.\n\nAssertions\n----------\n\nAll assertions use a `when` mechanism.\n\nUsing 'expect':\n\n```coffeescript\nexpect(-> codeThatYieldsAChangedResult).to....when ->\n  executeTheCodeThatCausesTheChange()\n```\n\nThe code within the `expect` section will be executed first, then the\ncode in the `when` section will be executed and then the code in the\n`expect` section will be executed again and the differences will be\nasserted.\n\nSame test using 'should':\n\n```coffeescript\n(-> codeThatYieldsAChangedResult).should....when ->\n  executeTheCodeThatCausesTheChange()\n```\n\n### when\n\nExecutes the build up pre- and post-conditions. First it executes the\npre-conditions, then it will execute the provided callback. And after\nthe callback it will assert the post-conditions. It will change the\nobject in the assertion chain to the result of the callback.\n\n#### Promises\n\nWhen the callback returns a promise, the post-conditions are executed\nwhen the promise is fulfilled.\n\nThe `when` statement will return an assertion promise when the result of\nthe `when` block is a promise. To use in mocha, you can specify an\n`notify` key to trigger `done()`\n\n```coffeescript\nexpect(-> value).to.change.when(\n  -> promise\n  notify: done\n)\n```\n\nif you use\n[mocha-as-promised](https://github.com/domenic/mocha-as-promised), you\ndon't need to specify this notify method\n\nan alternative would be:\n\n```coffeescript\nexpect(-> value).to.change.when(-> promise).then\n  -> done()\n  (error) -> done(error)\n```\n\n### `change`\n\nAssert if the 'expect/should' changes its outcome when 'when' is\nexecuted\n\n```coffeescript\nresult = 0\n(-> result).should.change.when -> result += 1\nexpect(-> result).to.change.when -> result -= 1\nexpect(-> result).not.to.change.when -> result = result * 1\n```\n\n### `change.by(delta)`\n\nAssert if the change of the 'expect/should' has the provided delta\n\n```coffeescript\nresult = 0\n(-> result).should.change.by(3).when -> result += 3\nexpect(-> result).not.to.change.by(-3).when -> result += 1\nexpect(-> result).to.change.by(-2).when -> result -= 2\n```\n\n### `change.from(startValue)`\n\nAssert if the change starts from a certain value. The value is\ncompared using a deep equal.\n\n```coffeescript\nresult = ['a', 'b']\n(-> result).should.change.from(['a', 'b']).when -> result.push('c')\n(-> result).should.change.from(['a', 'b']).to(['a', 'b', 'c']).when -> result.push('c')\n```\n\n### `change.to(endValue)`\n\nAssert if the change ends in a certain value. The value is\ncompared using a deep equal.\n\n```coffeescript\nresult = ['a', 'b']\n(-> result).should.change.to(['a', 'b', 'c']).when -> result.push('c')\n(-> result).should.change.from(['a', 'b']).to(['a', 'c']).when -> result = ['a', 'c']\n```\n\n### `increase`\n\nAssert if the value increases when an action is performed\n\n```coffeescript\nresult = 0\nexpect(-> result).to.increase.when -> result += 1\nexpect(-> result).not.to.increase.when -> result\nexpect(-> result).not.to.increase.when -> result -= 1\n```\n\n### `decrease`\n\nAssert if the value decreases when an action is performed\n\n```coffeescript\nresult = 0\nexpect(-> result).to.decrease.when -> result -= 1\nexpect(-> result).not.to.decrease.when -> result\nexpect(-> result).not.to.decrease.when -> result += 1\n```\n\n### `atLeast(amount)`\n\nAssert if the value has a minimal change of 'amount'\n\n```coffeescript\nresult = 0\nexpect(-> result).to.change.by.atLeast(4).when -> result += 5\nexpect(-> result).to.change.by.atLeast(4).when -> result -= 10\n```\n\n### `atMost(amount)`\n\nAssert if the value has a maximum change of 'amount'\n\n```coffeescript\nresult = 0\nexpect(-> result).to.change.by.atMost(7).when -> result += 5\nexpect(-> result).to.change.by.atMost(14).when -> result -= 10\n```\n\n## Installation and Setup\n\n### Node\n\nDo an `npm install chai-changes` to get up and running. Then:\n\n```javascript\nvar chai = require(\"chai\");\nvar chaiChanges = require(\"chai-changes\");\n\nchai.use(chaiChanges);\n```\n\nYou can of course put this code in a common test fixture file; for an example using [Mocha][mocha]\n\n### AMD\n\nChai Changes supports being used as an [AMD][amd] module, registering itself anonymously (just like Chai). So,\nassuming you have configured your loader to map the Chai and Chai Changes files to the respective module IDs\n`\"chai\"` and `\"chai-changes\"`, you can use them as follows:\n\n```javascript\ndefine(function (require, exports, module) {\n    var chai = require(\"chai\");\n    var chaiChanges = require(\"chai-changes\");\n\n    chai.use(chaiChanges);\n});\n```\n\n### `<script>` tag\n\nIf you include Chai Changes directly with a `<script>` tag, after the one for Chai itself, then it will\nautomatically plug in to Chai and be ready for use:\n\n```html\n<script src=\"chai.js\"></script>\n<script src=\"chai-changes.js\"></script>\n```\n\n## License\n\nCopyright (c) 2012 Matthijs Groen\n\nMIT License (see the LICENSE file)\n\n[chai]: http://chaijs.com/\n[mocha]: http://visionmedia.github.com/mocha/\n[amd]: https://github.com/amdjs/amdjs-api/wiki/AMD\n",
  "readmeFilename": "README.md",
  "_id": "chai-changes@1.3.4",
  "dist": {
    "shasum": "ee10dd8eeb215653bea91426e31486621102bfe8"
  },
  "_from": "chai-changes@>= 1.0.0",
  "_resolved": "https://registry.npmjs.org/chai-changes/-/chai-changes-1.3.4.tgz"
}
